import java.util.Scanner;

public class WordProcessor {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // Input: a string of words and a 2-digit number
        String input = sc.nextLine();
        int number = sc.nextInt();

        // Split the input string into words
        String[] words = input.split(" ");

        // Extract positions from the 2-digit number
        int pos1 = number / 10 - 1; // First digit (zero-based index)
        int pos2 = number % 10 - 1; // Second digit (zero-based index)

        // Process the words
        String result1 = processWord(words[pos1]);
        String result2 = processWord(words[pos2]);

        // Combine results
        String result = result1 + " " + result2;
        System.out.println(result);

        sc.close();
    }

    private static String processWord(String word) {
        int len = word.length();
        int mid = len / 2; // Middle index

        StringBuilder middleToBegin = new StringBuilder();
        String middleToEnd;

        // Extract parts based on whether the length is odd or even
        if (len % 2 == 0) {
            middleToBegin.append(new StringBuilder(word.substring(0, mid)).reverse());
            middleToEnd = word.substring(mid);
        } else {
            middleToBegin.append(new StringBuilder(word.substring(0, mid + 1)).reverse());
            middleToEnd = word.substring(mid);
        }

        // Combine both parts and return
        return middleToBegin.toString() + middleToEnd;
    }
}import java.util.Scanner;

public class WordProcessor {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        // Input: a string of words and a 2-digit number
        String input = sc.nextLine();
        int number = sc.nextInt();

        // Split the input string into words
        String[] words = input.split(" ");

        // Extract positions from the 2-digit number
        int pos1 = number / 10 - 1; // First digit (zero-based index)
        int pos2 = number % 10 - 1; // Second digit (zero-based index)

        // Process the words
        String result1 = processWord(words[pos1]);
        String result2 = processWord(words[pos2]);

        // Combine results
        String result = result1 + " " + result2;
        System.out.println(result);

        sc.close();
    }

    private static String processWord(String word) {
        int len = word.length();
        int mid = len / 2; // Middle index

        StringBuilder middleToBegin = new StringBuilder();
        String middleToEnd;

        // Extract parts based on whether the length is odd or even
        if (len % 2 == 0) {
            middleToBegin.append(new StringBuilder(word.substring(0, mid)).reverse());
            middleToEnd = word.substring(mid);
        } else {
            middleToBegin.append(new StringBuilder(word.substring(0, mid + 1)).reverse());
            middleToEnd = word.substring(mid);
        }

        // Combine both parts and return
        return middleToBegin.toString() + middleToEnd;
    }
}
